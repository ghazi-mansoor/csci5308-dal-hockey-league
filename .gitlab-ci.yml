image: gradle:alpine

variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  GIT_STRATEGY: clone

before_script:
  - chmod +x ./gradlew
  - export GRADLE_USER_HOME='pwd'/.gradle

stages:
  - build
  - test
  - deploy

build:
  stage: build
  only: 
    refs:
        - branches
  tags:
    - ugrad
  script: ./gradlew --build-cache assemble

test:
  stage: test
  only:
    refs:
      - branches
  except:
    - master
  tags:
    - ugrad
  script: ./gradlew check
  
deployStep:
  stage: deploy
  tags:
    - ugrad
  artifacts:
    paths:
      # Change this directory to the path that contains your built executable. TESTING
      - build/libs
  script:
    - chmod og-rwx ${DEPLOY_SSH_KEY}
    - echo ${CI_COMMIT_REF_NAME}
    - echo ${DEPLOY_SSH_KEY}
    # The following commands will zip your build folder, and transfer that
    # zip file to the designated Timberlea account. You will need to change
    # the <BUILDDIRECTORY> string to the actual directory where your build artifacts
    # reside when your build commands are complete on the runner.
    # Notice how these commands are using the variables you defined in your GitLab CI/CD
    # settings in earlier steps. It will not work without those variables.
    - zip -r ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.zip build
    - scp -r -o StrictHostKeyChecking=no -i "${DEPLOY_SSH_KEY}" ${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.zip "${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_DIR}/${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}.zip"  
